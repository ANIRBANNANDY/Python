from flask import Flask, render_template, request, redirect, url_for, session
from werkzeug.security import generate_password_hash, check_password_hash
import sqlite3, uuid, smtplib
from email.message import EmailMessage
import os

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'

# ---------- DATABASE SETUP ----------
def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            email TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# ---------- EMAIL UTILITY ----------
def send_reset_email(recipient, token):
    msg = EmailMessage()
    msg['Subject'] = 'Password Reset Request'
    msg['From'] = 'your_email@example.com'
    msg['To'] = recipient
    reset_link = f"http://localhost:5000/reset/{token}"
    msg.set_content(f"Click the link to reset your password: {reset_link}")

    # Replace with your SMTP details
    with smtplib.SMTP('smtp.example.com', 587) as smtp:
        smtp.starttls()
        smtp.login('your_email@example.com', 'your_email_password')
        smtp.send_message(msg)

# ---------- ROUTES ----------

@app.route('/')
def home():
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("SELECT password_hash FROM users WHERE username = ?", (username,))
        result = cursor.fetchone()
        conn.close()

        if result and check_password_hash(result[0], password):
            session['username'] = username
            return redirect(url_for('index'))
        else:
            return 'Invalid credentials'

    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        hashed_pw = generate_password_hash(password)

        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        try:
            cursor.execute("INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)",
                           (username, email, hashed_pw))
            conn.commit()
        except sqlite3.IntegrityError:
            return 'User already exists'
        finally:
            conn.close()

        return redirect(url_for('login'))

    return render_template('register.html')

@app.route('/forgot', methods=['GET', 'POST'])
def forgot():
    if request.method == 'POST':
        email = request.form['email']
        token = str(uuid.uuid4())  # Ideally store token with expiry in DB
        send_reset_email(email, token)
        return 'Password reset link sent to your email'

    return render_template('forgot.html')

@app.route('/reset/<token>', methods=['GET', 'POST'])
def reset(token):
    if request.method == 'POST':
        email = request.form['email']
        new_password = request.form['password']
        hashed_pw = generate_password_hash(new_password)

        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET password_hash = ? WHERE email = ?", (hashed_pw, email))
        conn.commit()
        conn.close()

        return redirect(url_for('login'))

    return render_template('reset.html', token=token)

@app.route('/index')
def index():
    if 'username' not in session:
        return redirect(url_for('login'))
    return f"Welcome {session['username']}!"

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True)
