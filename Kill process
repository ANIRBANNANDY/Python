import os
import psutil
from datetime import datetime, timedelta

def setup_logging():
    """Sets up the log directory and returns the log file path."""
    log_dir = "logs"
    os.makedirs(log_dir, exist_ok=True)  # Create the logs directory if it doesn't exist
    log_file = os.path.join(log_dir, f"log_{datetime.now().strftime('%Y-%m-%d')}.txt")
    return log_file

def log_termination(log_file, process_name, pid, runtime):
    """Logs the details of the terminated process to a file."""
    with open(log_file, "a") as log:
        log.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - Terminated process: {process_name}, "
                  f"PID: {pid}, Runtime: {runtime}\n")

def check_and_kill_long_running_process(process_name, time_limit_minutes, log_file):
    """
    Checks for a process containing `process_name` in its command line.
    If running for more than `time_limit_minutes`, it terminates the process and logs the details.
    """
    time_limit = timedelta(minutes=time_limit_minutes)
    now = datetime.now()

    for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'create_time']):
        try:
            # Check if the process command line contains the target name
            cmdline = proc.info['cmdline']
            if cmdline and any(process_name in arg for arg in cmdline):
                # Calculate how long the process has been running
                create_time = datetime.fromtimestamp(proc.info['create_time'])
                runtime = now - create_time

                if runtime > time_limit:
                    print(f"Terminating process {proc.info['name']} (PID: {proc.info['pid']}) "
                          f"running for {runtime}.")
                    proc.terminate()
                    proc.wait()  # Wait for the process to terminate
                    log_termination(log_file, proc.info['name'], proc.info['pid'], runtime)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            # Skip processes that no longer exist or cannot be accessed
            continue

if __name__ == "__main__":
    # Process name to search in command line
    process_name = "pull_data.py"
    # Time limit in minutes
    time_limit_minutes = 45

    # Set up logging
    log_file = setup_logging()

    # Run the process check and kill function
    check_and_kill_long_running_process(process_name, time_limit_minutes, log_file)
