import os
import psutil
from datetime import datetime, timedelta

def setup_logging():
    """Sets up the log directory and returns the log file path."""
    log_dir = "logs"
    os.makedirs(log_dir, exist_ok=True)  # Create the logs directory if it doesn't exist
    log_file = os.path.join(log_dir, f"log_{datetime.now().strftime('%Y-%m-%d')}.txt")
    return log_file

def log_message(log_file, message):
    """Logs a message to the log file with a timestamp."""
    with open(log_file, "a") as log:
        log.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - {message}\n")

def find_latest_folder(root_folder, log_file):
    """Finds the latest folder in the specified root folder."""
    try:
        subfolders = [os.path.join(root_folder, d) for d in os.listdir(root_folder) if os.path.isdir(os.path.join(root_folder, d))]
        if not subfolders:
            log_message(log_file, f"No subfolders found in: {root_folder}")
            return None

        latest_folder = max(subfolders, key=os.path.getmtime)
        log_message(log_file, f"Latest folder found: {latest_folder}")
        return latest_folder
    except Exception as e:
        log_message(log_file, f"Error finding latest folder in {root_folder}: {e}")
        return None

def find_latest_file(data_folder, log_file):
    """Finds the latest file in the specified data folder."""
    try:
        files = [os.path.join(data_folder, f) for f in os.listdir(data_folder) if os.path.isfile(os.path.join(data_folder, f))]
        if not files:
            log_message(log_file, f"No files found in: {data_folder}")
            return None, None

        latest_file = max(files, key=os.path.getmtime)
        last_modified_time = datetime.fromtimestamp(os.path.getmtime(latest_file))
        log_message(log_file, f"Latest file found: {latest_file}, Last modified: {last_modified_time}")
        return latest_file, last_modified_time
    except Exception as e:
        log_message(log_file, f"Error finding latest file in {data_folder}: {e}")
        return None, None

def check_and_kill_process_if_condition_met(process_name, process_time_limit_minutes, root_folder, folder_time_limit_minutes, log_file):
    """
    Checks a process's runtime and the latest file modification time in a specific folder hierarchy.
    Only terminates the process if both conditions are met.
    """
    time_limit = timedelta(minutes=process_time_limit_minutes)
    now = datetime.now()

    for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'create_time']):
        try:
            cmdline = proc.info['cmdline']
            if cmdline and any(process_name in arg for arg in cmdline):
                create_time = datetime.fromtimestamp(proc.info['create_time'])
                runtime = now - create_time

                log_message(log_file, f"Found process: {proc.info['name']}, PID: {proc.info['pid']}, Runtime: {runtime}")

                if runtime > time_limit:
                    # Step 1: Find the latest folder in the root folder
                    latest_folder = find_latest_folder(root_folder, log_file)
                    if not latest_folder:
                        log_message(log_file, f"Skipping process {proc.info['name']} (PID: {proc.info['pid']}) because no valid folder was found.")
                        continue

                    # Step 2: Check the latest file in the `data` subfolder
                    data_folder = os.path.join(latest_folder, "data")
                    latest_file, last_modified_time = find_latest_file(data_folder, log_file)
                    if not latest_file or not last_modified_time:
                        log_message(log_file, f"Skipping process {proc.info['name']} (PID: {proc.info['pid']}) because no valid file was found in {data_folder}.")
                        continue

                    # Step 3: Check if the latest file is older than the time limit
                    time_diff = now - last_modified_time
                    if time_diff > timedelta(minutes=folder_time_limit_minutes):
                        print(f"Terminating process {proc.info['name']} (PID: {proc.info['pid']}) running for {runtime}.")
                        proc.terminate()
                        proc.wait()  # Wait for the process to terminate
                        log_message(log_file, f"Terminated process: {proc.info['name']}, PID: {proc.info['pid']}, Runtime: {runtime}, "
                                              f"Latest file: {latest_file}, Time since last modification: {time_diff}")
                    else:
                        log_message(log_file, f"Process {proc.info['name']} (PID: {proc.info['pid']}) not terminated because "
                                              f"latest file {latest_file} was modified {time_diff} ago.")
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            continue

if __name__ == "__main__":
    # Configuration
    process_name = "pull_data.py"
    process_time_limit_minutes = 45
    root_folder = "path/to/your/root/folder"  # Replace with the root folder path
    folder_time_limit_minutes = 20

    # Set up logging
    log_file = setup_logging()
    log_message(log_file, "Script started.")

    # Check processes and conditionally terminate
    check_and_kill_process_if_condition_met(process_name, process_time_limit_minutes, root_folder, folder_time_limit_minutes, log_file)

    log_message(log_file, "Script finished.")
